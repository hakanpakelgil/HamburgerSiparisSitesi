// <auto-generated />
using System;
using HamburgerMVC4.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HamburgerMVC4.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExtraOrder", b =>
                {
                    b.Property<int>("ExtrasId")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnType("int");

                    b.HasKey("ExtrasId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("ExtraOrder");
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Beef"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Chicken"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Vegan"
                        });
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Drink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "cocacola.png",
                            Name = "Coca Cola"
                        },
                        new
                        {
                            Id = 2,
                            Image = "fanta.png",
                            Name = "Fanta"
                        },
                        new
                        {
                            Id = 3,
                            Image = "ayran.png",
                            Name = "Ayran"
                        },
                        new
                        {
                            Id = 4,
                            Image = "sprite.png",
                            Name = "Sprite"
                        },
                        new
                        {
                            Id = 5,
                            Image = "cocacolazero.png",
                            Name = "Coca Cola Zero"
                        },
                        new
                        {
                            Id = 6,
                            Image = "fusetealemon.png",
                            Name = "Fuse Tea Lemon"
                        },
                        new
                        {
                            Id = 7,
                            Image = "fuseteapeach.png",
                            Name = "Fuse Tea Peach"
                        });
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Extra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Extras");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ketchup",
                            UnitPrice = 5.0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mayonaise",
                            UnitPrice = 5.0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mustard",
                            UnitPrice = 10.0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Chipotle",
                            UnitPrice = 15.0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ranch",
                            UnitPrice = 10.0
                        },
                        new
                        {
                            Id = 6,
                            Name = "BBQ",
                            UnitPrice = 15.0
                        });
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Two flame grilled 100% beef patties with melted American cheese, freshly cut \r\niceberg lettuce, sliced white onions, crunchy pickles and Big king sauce all \r\non a warm, toasted, sesame seed bun.",
                            Image = "bigking.png",
                            Name = "Big King",
                            UnitPrice = 185.0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "The Boost Burger's Big Mac® is a 100% beef burger with a taste like no other. \r\nThe mouthwatering perfection starts with two 100% pure all beef patties and \r\nBig Mac® sauce sandwiched between a sesame seed bun. It's topped off with pickles, \r\ncrisp shredded lettuce, finely chopped onion, and a slice of American cheese.",
                            Image = "bigmac.png",
                            Name = "Big Mac",
                            UnitPrice = 195.0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "This legendary American burger is a true all-rounder! A 100% beef patty, \r\nEmmental cheese, onions, juicy tomatoes and a unique smoky flavoured sauce \r\nall nested in a freshly toasted bun.",
                            Image = "bigtasty.png",
                            Name = "Big Tasty",
                            UnitPrice = 200.0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Cheeseburger is a hamburger with a slice of melted cheese on top of the \r\nmeat patty, added near the end of the cooking time. Cheeseburgers can include \r\nvariations in structure, ingredients and composition.\r\n",
                            Image = "cheeseburger.png",
                            Name = "Cheeseburger",
                            UnitPrice = 180.0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "Tasty chicken wrapped in a special crisp coating, topped with iceberg lettuce, \r\ncreamy mayo and crowned with a toasted sesame seed bun.",
                            Image = "chickenroyale.png",
                            Name = "Chicken Royale",
                            UnitPrice = 165.0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "The Boost Burger's Double Cheeseburger features two 100% pure all beef patties \r\nseasoned with just a pinch of salt and pepper. It's topped with tangy pickles, \r\nchopped onions, ketchup, mustard, and two melty American cheese slices.",
                            Image = "doublecheeseburger.png",
                            Name = "Double Cheeseburger",
                            UnitPrice = 185.0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "McChicken® Sandwich. Crispy coated chicken with lettuce and our sandwich sauce, \r\nin a soft, sesame-topped bun. A true classic.\r\n",
                            Image = "mcchicken.png",
                            Name = "McChicken Sandwich",
                            UnitPrice = 150.0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "The Whopper is a hamburger consisting of a flame-grilled 4 oz (110 g) beef patty, \r\nsesame seed bun, mayonnaise, lettuce, tomato, pickles, ketchup, and sliced onion. \r\nOptional ingredients such as American cheese, bacon, mustard, guacamole or \r\njalapeño peppers may be added upon request.",
                            Image = "whopper.png",
                            Name = "Whopper",
                            UnitPrice = 197.0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Description = "Charbroiled all-beef patty topped with dill pickles, ketchup and mustard on a \r\nplain bun. Served with kid's drink and kid's fry.",
                            Image = "happykids.png",
                            Name = "Happy Kids",
                            UnitPrice = 145.0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 4,
                            Description = "A juicy flame-grilled, 100% plant-based patty topped with creamy mayonnaise, \r\nfreshly cut iceberg lettuce, juicy tomatoes, sliced white onions, crunchy pickles, \r\nand ketchup on a toasted sesame seed bun.",
                            Image = "plantbasedwhopper.png",
                            Name = "Plant Based Whopper",
                            UnitPrice = 165.0
                        });
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ExtraOrder", b =>
                {
                    b.HasOne("HamburgerMVC4.Data.Extra", null)
                        .WithMany()
                        .HasForeignKey("ExtrasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HamburgerMVC4.Data.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Menu", b =>
                {
                    b.HasOne("HamburgerMVC4.Data.Category", "Category")
                        .WithMany("Menus")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Order", b =>
                {
                    b.HasOne("HamburgerMVC4.Data.Drink", "Drink")
                        .WithMany("Orders")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HamburgerMVC4.Data.Menu", "Menu")
                        .WithMany("Orders")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Menu");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Category", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Drink", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HamburgerMVC4.Data.Menu", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
